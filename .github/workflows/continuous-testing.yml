name: Continuous Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        if: matrix.service == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            cd services/api
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-asyncio
          else
            cd apps/web
            npm ci
          fi
      
      - name: Run unit tests
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            cd services/api
            pytest tests/unit -v --cov=. --cov-report=xml
          else
            cd apps/web
            npm run test:unit -- --coverage
          fi
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r services/api/requirements.txt
          npm ci
      
      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE test_db"
          cd services/api
          alembic upgrade head
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          # Start API server
          cd services/api
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          API_PID=$!
          
          # Wait for API to be ready
          npx wait-on http://localhost:8000/healthz
          
          # Run integration tests
          pytest tests/integration -v
          npm run test:integration
          
          # Stop API server
          kill $API_PID

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Generate MSW mocks
        run: |
          if [ -f "docs/api/openapi.yaml" ]; then
            npm run generate:msw
          fi
      
      - name: Build frontend
        run: |
          cd apps/web
          npm run build
      
      - name: Run E2E tests with mocks
        env:
          NEXT_PUBLIC_USE_MOCKS: 'true'
        run: |
          cd apps/web
          npm run dev &
          DEV_PID=$!
          
          # Wait for app to be ready
          npx wait-on http://localhost:3000
          
          # Run E2E tests
          npx playwright test
          
          # Stop dev server
          kill $DEV_PID
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r services/api/requirements.txt
          npm ci
      
      - name: Validate API implementation against spec
        run: |
          if [ -f "docs/api/openapi.yaml" ]; then
            # Start API server
            cd services/api
            uvicorn main:app --host 0.0.0.0 --port 8000 &
            API_PID=$!
            
            # Wait for API
            npx wait-on http://localhost:8000/healthz
            
            # Run contract tests
            cd ../..
            npx dredd docs/api/openapi.yaml http://localhost:8000
            
            # Run generated contract tests
            if [ -d "tests/contract" ]; then
              pytest tests/contract/ -v
            fi
            
            # Stop API
            kill $API_PID
          fi

  msw-tests:
    name: MSW Mock Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          cd apps/web
          npm ci
      
      - name: Test MSW handlers
        run: |
          cd apps/web
          npm run test:mocks
      
      - name: Validate mocks against OpenAPI
        run: |
          if [ -f "docs/api/openapi.yaml" ] && [ -d "apps/web/src/mocks" ]; then
            # Validate that MSW mocks match OpenAPI spec
            npx msw-openapi-validator \
              --spec docs/api/openapi.yaml \
              --handlers apps/web/src/mocks/handlers.ts
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, contract-tests, msw-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.contract-tests.result }}" != "success" ] || \
             [ "${{ needs.msw-tests.result }}" != "success" ]; then
            echo "‚ùå Some tests failed"
            exit 1
          fi
          echo "‚úÖ All tests passed"
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üß™ Test Results
            
            | Test Suite | Status |
            |------------|--------|
            | Unit Tests | ${{ needs.unit-tests.result }} |
            | Integration Tests | ${{ needs.integration-tests.result }} |
            | E2E Tests | ${{ needs.e2e-tests.result }} |
            | Contract Tests | ${{ needs.contract-tests.result }} |
            | MSW Mock Tests | ${{ needs.msw-tests.result }} |
            
            Overall: ${{ job.status }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });